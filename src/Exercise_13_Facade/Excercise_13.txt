EXERCISE 13

FACADE

Nivel: 游댠游댠

Objective:
Implement Facade pattern according to the following statement.

Exercise:
Suppose we have to program a discount calculation system in a supermarket.

There are cumulative discounts (the percentages are added) according to:
췉 By card: if it is from the Star Bank, it has an extra 20% discount.
췉 By type of product: cans have a 10% discount.
췉 By quantity: if you buy more than 12 there is a 15% discount.

Each discount policy is implemented in a different API:
1. ApiCard:int discount(Card)
2. ProductApi:int discount(Product)
3. ApiQuantity:int discount(quantity)

Therefore, a facade will be implemented that allows exposing the high-level discount calculation that uses the different APIs.
You also have to model the classes:
췉 Product: String name and String type
췉 Card: String number and String bank

Using the Facade pattern, we want to make a facade that allows us to simplify the discount calculation with product, card and quantity as parameters.


//SPANISH


Objetivo:
Implementar patr칩n Facade seg칰n el siguiente enunciado.

Actividad:
Supongamos que tenemos que programar un sistema de c치lculo de descuento en un supermercado.

Hay descuentos acumulables (se suman los porcentajes) seg칰n:
췉 Por tarjeta: si es del banco Star Bank tiene un 20%de descuento extra.
췉 Por tipo de producto: las latas tienen un 10% de descuento.
췉 Por cantidad: si compran m치s de 12 hay un descuento del 15%.

Cada pol칤tica de descuento est치 implementada en una API diferente:
1. ApiTarjeta:int descuento(Tarjeta)
2. ApiProducto:int descuento(Producto)
3. ApiCantidad:int descuento(cantidad)

Por lo cual se implementar치 una fachada que permita exponer el c치lculo de descuento de alto nivel que utilice las diferentes api.
Hay que modelar tambi칠n las clases:
췉 Producto: nombre String y tipo String
췉 Tarjeta: n칰mero String y banco String

Utilizando el patr칩n Facade se quiere hacer una fachada que permita simplificar el c치lculo de descuento con producto, tarjeta y cantidad como par치metros